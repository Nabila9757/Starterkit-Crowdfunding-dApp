/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface CrowdfactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createProject" | "publishedProjs" | "totalPublishedProjs"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Projectcreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishedProjs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPublishedProjs",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishedProjs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPublishedProjs",
    data: BytesLike
  ): Result;
}

export namespace ProjectcreatedEvent {
  export type InputTuple = [
    projTitle: string,
    goalAmount: BigNumberish,
    ownerWallet: AddressLike,
    projAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    projTitle: string,
    goalAmount: bigint,
    ownerWallet: string,
    projAddress: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    projTitle: string;
    goalAmount: bigint;
    ownerWallet: string;
    projAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Crowdfactory extends BaseContract {
  connect(runner?: ContractRunner | null): Crowdfactory;
  waitForDeployment(): Promise<this>;

  interface: CrowdfactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProject: TypedContractMethod<
    [
      projectTitle: string,
      projgoalAmount: BigNumberish,
      projDescript: string,
      ownerWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  publishedProjs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  totalPublishedProjs: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      projectTitle: string,
      projgoalAmount: BigNumberish,
      projDescript: string,
      ownerWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "publishedProjs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalPublishedProjs"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Projectcreated"
  ): TypedContractEvent<
    ProjectcreatedEvent.InputTuple,
    ProjectcreatedEvent.OutputTuple,
    ProjectcreatedEvent.OutputObject
  >;

  filters: {
    "Projectcreated(string,uint256,address,address,uint256)": TypedContractEvent<
      ProjectcreatedEvent.InputTuple,
      ProjectcreatedEvent.OutputTuple,
      ProjectcreatedEvent.OutputObject
    >;
    Projectcreated: TypedContractEvent<
      ProjectcreatedEvent.InputTuple,
      ProjectcreatedEvent.OutputTuple,
      ProjectcreatedEvent.OutputObject
    >;
  };
}
